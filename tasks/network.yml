---
# aws_network.yml
#
# Ansible playbook to create a standard secure AWS public/private
# subnet environment in the specified VPC, with hardened Bastion
# and NAT Proxy instances deployed in the public subnet and appropriate
# routing tables and security groups set up.
#
# It is based on the AWS wiki for VPC "Scenario 2":
# https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html
#
# semuadmin - github.com/semuconsulting - 02/2018
#
- name: Ensure VPC has an internet gateway.
  ec2_vpc_igw:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
  register: igw

- name: Create private subnet.
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ public_cidr }}"
    az: "{{ availability_zone }}"
    resource_tags:
      Name: "{{ private_name }}"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
  register: subnet_public

- name: Create public subnet.
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ private_cidr}}"
    az: "{{ availability_zone }}"
    resource_tags:
      Name: "{{ public_name }}"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
  register: subnet_private

- name: Set up Public subnet network access control list.
  ec2_vpc_nacl:
    state: 'present'
    vpc_id: "{{ vpc_id }}"
    name: "NACL_public"
    region: "{{ region }}"
    subnets:
      - "{{ subnet_public.subnet.id }}"
      #- "checkmode_testing123"
    tags:
      Name: "NACL_public"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
      Description: Public Network Access Control List
    ingress: "{{ public_nacl_in }}"
    egress: "{{ public_nacl_out }}"
  register: nacl_public
  when: setup_public_nacl

- name: Set up Private subnet network access control list
  ec2_vpc_nacl:
    state: 'present'
    vpc_id: "{{ vpc_id }}"
    name: "NACL_private"
    region: "{{ region }}"
    subnets:
      - "{{ subnet_private.subnet.id }}"
      #- "checkmode_testing123"
    tags:
      Name: "NACL_private"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
      Description: Private Network Access Control List
    ingress: "{{ private_nacl_in }}"
    egress: "{{ private_nacl_out }}"
  register: nacl_private
  when: setup_private_nacl

- name: Create custom linux Bastion security group.
  ec2_group:
    state: present
    name: "sg_bastion"
    description: "Bastion security group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "sg_bastion"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    # inbound rules
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: "{{ admin_cidr }}"
        rule_desc: allow inbound ssh from admin machine(s) only
      - proto: udp
        ports:
          - 1194
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow inbound openvpn connection from internet
    # outbound rules
    rules_egress:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow outbound http(s) to internet
      - proto: tcp
        ports:
          - 22
        # can tighten this rule up to specific security group(s) if required
        cidr_ip: "{{ public_cidr }}"
        rule_desc: allow outbound ssh to public subnet
      - proto: tcp
        ports:
          - 22
        # can tighten this rule up to specific security group(s) if required
        cidr_ip: "{{ private_cidr }}"
        rule_desc: allow outbound ssh to private subnet
  register: sg_bastion

- name: Create custom linux NAT security group.
  ec2_group:
    state: present
    name: "sg_nat"
    description: "NAT security group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "sg_nat"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    # inbound rules
    rules:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: "{{ private_cidr}}"
        rule_desc: allow inbound http(s) from private zone
      - proto: tcp
        ports:
          - 22
        group_name: "sg_bastion"
        rule_desc: allow inbound ssh from bastion group only
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: "{{ private_cidr}}"
        rule_desc: allow inbound ping from private zone
    # outbound rules
    rules_egress:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow outbound http(s) to internet
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: 0.0.0.0/0
        rule_desc: allow outbound ping to internet
  register: sg_nat

- name: Create custom public (web server) security group.
  ec2_group:
    state: present
    name: "sg_public"
    description: "Public security group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "sg_public"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    # inbound rules
    rules:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow inbound http(s) from internet
      - proto: tcp
        ports:
          - 22
        group_name: "sg_bastion"
        rule_desc: allow inbound ssh from bastion group only
    # outbound rules
    rules_egress:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow outbound http(s) to internet
      - proto: tcp
        ports:
          - "{{ db_port }}"
        # can tighten this rule up to specific security group(s) if required
        cidr_ip: "{{ private_cidr }}"
        rule_desc: allow outbound database connection to private subnet
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: 0.0.0.0/0
        rule_desc: allow outbound ping to internet
  register: sg_public

- name: Create custom private (database server) security group.
  ec2_group:
    state: present
    name: "sg_private"
    description: "Private security group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "sg_private"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    # inbound rules
    rules:
      - proto: tcp
        ports:
          - "{{ db_port }}"
        group_name: "sg_public"
        rule_desc: allow inbound database connection from webserver group
      - proto: tcp
        ports:
          - 22
        group_name: "sg_bastion"
        rule_desc: allow inbound ssh from bastion group only
    # outbound rules
    rules_egress:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow outbound http(s) to internet
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: 0.0.0.0/0
        rule_desc: allow outbound ping to internet
  register: sg_private

- name: Create NAT EC2 instance in public subnet.
  ec2:
    state: present
    id: "nat_15"
    image: "{{ nat_ami }}"
    instance_type: "{{ nat_instance_type }}"
    key_name: "{{ keypair_name }}"
    vpc_subnet_id: "{{ subnet_public.subnet.id }}"
    #vpc_subnet_id: "checkmode_testing123"
    assign_public_ip: true
    source_dest_check: false
    group_id: "{{ sg_nat.group_id }}"
    zone: "{{ availability_zone }}"
    region: "{{ region }}"
    instance_tags:
      Name: "NAT"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    count: 1
    wait: true
  register: ec2_nat

- name: Set up public subnet route table.
  ec2_vpc_route_table:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "rt_public"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    subnets:
      - "{{ subnet_public.subnet.id }}"
      #- "checkmode_testing123"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: rtb_public

- name: Set up private (NAT-protected) route table.
  ec2_vpc_route_table:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "rt_private"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    subnets:
      - "{{ subnet_private.subnet.id }}"
      #- "checkmode_testing123"
    routes:
      - dest: 0.0.0.0/0
        instance_id: "{{ ec2_nat.instances.0.id }}"
        # instance_id: "checkmode_testing123"
  register: rtb_private

- name: Create S3 VPC endpoint with Full Access policy.
  ec2_vpc_endpoint:
    state: present
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    service: "com.amazonaws.{{ region }}.s3"
    route_table_ids:
      - "{{ rtb_public.route_table.id }}"
      - "{{ rtb_private.route_table.id }}"
      #- "checkmode_testing123"
  register: vpce_S3
  when: create_s3_vpce

- name: Create Bastion EC2 instance in public subnet.
  ec2:
    state: present
    id: "bastion_15"
    image: "{{ bastion_ami }}"
    instance_type: "{{ bastion_instance_type }}"
    key_name: "{{ keypair_name }}"
    vpc_subnet_id: "{{ subnet_public.subnet.id }}"
    #vpc_subnet_id: "checkmode_testing123"
    assign_public_ip: true
    source_dest_check: true
    group_id: "{{ sg_bastion.group_id }}"
    #group_id: "checkmode_testing123"
    zone: "{{ availability_zone }}"
    region: "{{ region }}"
    instance_tags:
      Name: "Bastion"
      Project: "{{ tag_project }}"
      Provisioner: "ansible"
      CostCode: "{{ tag_cost_code }}"
    count: 1
    wait: true
  register: ec2_bastion

- name: Allocate a new elastic IP and associate it with Bastion instance.
  ec2_eip:
    device_id: "{{ ec2_bastion.instances.0.id }}"
    region: "{{ region }}"
    release_on_disassociation: true
#    name: "eip_bastion"
#    tags:
#      Name: "eip_bastion"
#      Project: "{{ tag_project }}"
#      Provisioner: "ansible"
#      CostCode: "{{ tag_cost_code }}"
  register: eip_bastion
  when: create_bastion_eip

- name: Output the Bastion IP.
  debug:
    msg: "Allocated Bastion IP is {{ eip_bastion.public_ip }}"
  when: create_bastion_eip
